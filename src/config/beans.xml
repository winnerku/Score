<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context-3.0.xsd  
            http://www.springframework.org/schema/tx  
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
            http://www.springframework.org/schema/jdbc  
            http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/util 
            http://www.springframework.org/schema/util/spring-util.xsd">
    <context:annotation-config/>
    <context:component-scan base-package="com.sanzhong.score.*"/>
    <bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>classpath:config/jdbc.properties</value>
        </property>
    </bean>
    <bean id="dataSource" destroy-method="close"
          class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="10"/>
        <property name="maxActive" value="100"/>
        <property name="maxIdle" value="2"/>
        <property name="minIdle" value="1"/>
        <!-- testOnBorrow :borrowObject进行处理时，对拿到的connection进行validateObject校验
            testOnReturn : returnObject对返回的connection进行validateObject校验，个人觉得对数据库连接池的管理意义不大
            testWhileIdle : 关注的重点，GenericObjectPool中针对pool管理，起了一个 异步Evict的TimerTask定时线程进行控制
            ( 可通过设置参数 timeBetweenEvictionRunsMillis>0),
            定时对线程池中的链接进行validateObject校验，对无效的链接进行关闭后，会调用
            ensureMinIdle，适当建立链接保证最小的minIdle连接数。
            timeBetweenEvictionRunsMillis, 设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程
            validateQuery ， 代表检查的sql
            validateQueryTimeout ， 代表在执行检查时，通过statement设置，
            statement.setQueryTimeout(validationQueryTimeout)
            numTestsPerEvictionRun ，代表每次检查链接的数量，建议设置和maxActive一样大，这样每次可以有效检查所有的链接. -->
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="validationQuery" value="select now()"/>
        <property name="validationQueryTimeout" value="1"/>
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <property name="numTestsPerEvictionRun" value="16"/>
        <property name="minEvictableIdleTimeMillis" value="18000000"/>
        <property name="removeAbandoned" value="true"/>
        <property name="removeAbandonedTimeout" value="180"/>
    </bean>
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource">
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <!-- 将save、delete、modify开头的事务之外的事务全部设置 为只读事务，这样也可以在一定程序上提高系统性能 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置那些类的那些方法参与事务 -->
    <aop:config>
        <!-- <aop:pointcut>标签指的是一个范围 -->
        <aop:pointcut id="allMagangerMethod" expression="execution(* com..service..*(..))"/>
        <!-- <aop:advisor>标签相当于Aspect -->
        <aop:advisor pointcut-ref="allMagangerMethod" advice-ref="txAdvice"/>
    </aop:config>
    <!-- 国际化 -->
    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename">
            <value>classpath:config/messages</value>
        </property>
    </bean>
    <bean id="myrealm" class="com.sanzhong.score.security.MyRealM"></bean>
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myrealm"/>
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.json"/>
        <property name="successUrl" value="/index.json"/>
        <property name="unauthorizedUrl" value="/login.json"/>
        <property name="filters">
            <util:map>
                <entry key="authc">
                    <bean
                            class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /html/** = anon
                /** = authc
            </value>
        </property>
    </bean>
</beans>